/*********************************************
 * OPL 22.1.1.0 Model
 * Author: User10
 * Creation Date: Oct 2, 2023 at 2:19:14 PM
 *********************************************/
 
//Modify CPLEX Parameters
execute PARAMS
{

cplex.nodefileind = 3; //saves nodes in files instead of working memory
cplex.workmem = 6400; //restrict working memory to 50 mb
cplex.preind = 1; 
cplex.epgap = 0.0115; // Optimality gap = 1.15%
cplex.threads = 16;

}

execute {
writeln(cplex.workmem)
}

//DEFINE SETS 


//Define set of districts
range locations = 1..46; // Changed from 625

//Define set of states
{string} states = ...;


//Define set of crops 
{string} crops = ...;


//DEFINE PARAMETERS 

/*Keep code as is if varying parameters and running �main.mod� else, 
specify the values of fp, tcf, tc_road, tc_rail, flow_cap before running the code. */

//MSP for each food crop
float mspg[crops] = ...;

//Fixed cost of operating a procurement center
int ff = 0;

//Operational cost of procurement for each food crop
float F[crops] = ...;

//Govt. Disposable quantity of each crop in each district 
float available[locations][crops] = ...;

execute {
    for (i in locations) {
        var total = sum (j in crops) available[i][j];
        writeln("Total for location ", i, ": ", total);
    }
}

}

// Road Distance between districts
float tt[locations][locations] = ...; 

//Leakage ratio of a crop in each state
float leakage[states][crops] = ... ;


/* Current (2011-12) PDS consumption in each district for each food crop. 
This would be 0 for coarse crops as coarse crops were not purchased through PDS in 2009-10 */
float curr_PDS_C[locations][crops] = ...;

//PDS consumption/purchase of each crop in each district 
float PDS_consmp[locations][crops] = ... ;


// PARAMETERS

//Transporation cost to farmers
float tcf = 2.64;

//Road Transporation cost per tonne-km
float tc_road = 2.64; 

//Road Transporation cost per tonne-km
float tc_rail = 1.32; 

//Flow capacity of a storage unit (tonnes per month)
float flow_cap = 3911.00;

//Fixed cost of storage 
float fp = 468816.00; 

//Variable cost of storage (Operational Cost in Rs./tonne/month from HLC Report)
float fv = 377.5; 

//Capacity of a procurement center
int big_M = 100000000; //10^8



//DECLARE DECISION VARIABLES

//Quantity of a food crop transported between districts going from producing district to procuring district 
dvar float+ Q[locations][locations][crops];

//dvar float+ q1[states][crops][hh] ;

//Quantity of a food crop going from procuring district to stage 1 storing district 
dvar float+ T[locations][locations][crops];

//Quantity of a food crop going from stage 1 storing district to stage 2 storing district 
dvar float+ Tp[locations][locations][crops];

//Quantity of a food crop going from stage 2 storing district to distribution district
dvar float+ S[locations][locations][crops] ;

//Number of storage centers in stage 1 of Storage in each district
dvar int+ Y[locations];

//Number of storage centers in stage 2 of Storage in each district
dvar int+ Yp[locations];

//Dummy variable to capture maximum of number of storage centers operating in Stage 1 & Stage 2, for each district
dvar int+ z[locations];

//binary decision variable for decision to procure a crop in a district
//This is 1-yk, different as compared to appendix 
dvar boolean Z[locations][crops];



//Building the objective function

//statement 1 broken into 2 parts, msp and f. 
//Expression to capture total purchase cost of procurement over all districts and food crops
dexpr float MSP = (sum (i in locations, proc in locations, j in crops) ( Q[i][proc][j]* mspg[j] ) ) ;

//Expression to capture total operational cost of procurement over all districts and food crops
dexpr float proc_cost = (sum(proc in locations, j in crops) ( (F[j] * ( sum(i in locations) (Q[i][proc][j]) ) + ff*Z[proc][j]) ) ) ;

//Expression to capture total storage cost in stage 1 over all districts and food crops
dexpr float storage_cost1 = (sum ( store in locations) ( (fp *z[store]) +  ( sum( proc in locations, j in crops ) fv * T[proc][store][j] ) ) )   ;

//Expression to capture total storage cost in stage 2 over all districts and food crops
dexpr float storage_cost2 = (sum ( store in locations) ( ( sum( proc in locations, j in crops ) fv * Tp[proc][store][j] ) ) )   ;

//Expression to capture total transportation cost incurred by farmers, who are coming to sell their produce, over all districts and food crops
dexpr float transportation_cost_farmer = (sum (i in locations, proc in locations, j in crops) ( Q[i][proc][j] * tcf * tt[i][proc] ) ) ;

//Expression to capture total transportation cost when transporating crops from procurement center to Stage 1 of storage, over all districts and food crops
dexpr float transportation_cost_stage1 = (sum (proc in locations, store in locations, j in crops) ( T[proc][store][j] * tc_road * tt[proc][store]) ) ;

//Expression to capture total transportation cost when transporating crops from Stage 1 to Stage 2 of storage, over all districts and food crops
dexpr float transportation_cost_stage2 = (sum (proc in locations, store in locations, j in crops) ( Tp[proc][store][j] * tc_rail * tt[proc][store]) ) ;

//Expression to capture total transportation cost when transporating crops from Stage 2 of storage to distribution district, over all districts and food crops
dexpr float transportation_cost_outbound = (sum (store in locations , distri in locations, j in crops) ( S[store][distri][j] * tc_road * tt[store][distri] ) ) ;


//MODEL

//OBJECTIVE FUNCTION 
//Minimize total government's cost
minimize
proc_cost + MSP + storage_cost1 + storage_cost2 + transportation_cost_farmer + transportation_cost_stage1 + transportation_cost_stage2 + transportation_cost_outbound //+ Open_mkt_Cost
;

//CONSTRAINTS 
subject to {


// Constraint 1
// Quantity procured in district i must be not exceed the quantity available for procurement
forall ( i in locations, j in crops)  { 
	ct1: ( sum (proc in locations) Q[i][proc][j] ) <= available[i][j] ;
}

// Constraint 2-4
//FLOW CONSTRAINTS 

// Total quantity procured in a district has to be equal to the quantity gone for storage from that district
forall ( proc in locations, j in crops ) {
	ct45: ( sum ( i in locations) Q[i][proc][j] ) ==  ( sum ( store in locations ) T[proc][store][j] ) ;
}

//Total quantity coming to storage Stage 1 has to be equal to the total quantity going out of storage Stage 1
 forall ( store1 in locations, j in crops) {
  	ct107: ( sum ( proc in locations) T[proc][store1][j] ) == ( sum ( store2 in locations) Tp[store1][store2][j] ) ;	 
}

//Total quantity stored at storage Stage 2 has to be equal to the total quantity distributed from storage Stage 2
forall ( store2 in locations, j in crops) {
  	ct110: ( sum ( store1 in locations) Tp[store1][store2][j] ) == ( sum ( distri in locations) S[store2][distri][j] ) ;	 
 }
 
// Constraint 5
//Decision for Procurement Centres
forall (proc in locations, j in crops) {
  
	ct2: ( sum ( i in locations) Q[i][proc][j] ) <= big_M * Z[proc][j] ;

}

//Contraint 6
/*If total quantity procured in a state is not equal to 0 then there exists atleast one storage center in that state. 
This constraint is written for each state.
*/
//All the district is of a common state are listed. We can turn on or off, based on this. 
ct179:( !(( sum ( proc in locations, store in (1..14), j in crops ) Q[proc][store][j] ) == 0 ) ) => ( ( sum ( i in (1..14) ) Y[i] ) >= 1 ) ;

ct180:( !((sum ( store in locations, distri in 15..26, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (15..26) ) Y[i] ) >= 1 ) ; 

//ct146:( !((sum ( store in locations, distri in 27..46, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (27..46) ) Y[i] ) >= 1 ) ;   
//
//ct147:( !((sum ( store in locations, distri in 47..47, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (47..47) ) Y[i] ) >= 1 ) ; 
//
//ct148:( !(( sum ( store in locations, distri in 48..62, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (48..62) ) Y[i] ) >= 1 ) ;
//
//ct149:( !(( sum ( store in locations, distri in 63..82, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (63..82) ) Y[i] ) >= 1 ) ; 
//
//ct150:( !(( sum ( store in locations, distri in 83..90, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (83..90) ) Y[i] ) >= 1 ) ; 
//
//ct151:( !(( sum ( store in locations, distri in 91..122, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (91..122) ) Y[i] ) >= 1 ) ;
//
//ct152:( !(( sum ( store in locations, distri in 123..193, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (123..193) ) Y[i] ) >= 1 ) ; 
//
//ct153:( !(( sum ( store in locations, distri in 194..231, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (194..231) ) Y[i] ) >= 1 ) ; 
//
//ct154:( !(( sum ( store in locations, distri in 232..235, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (232..235) ) Y[i] ) >= 1 ) ;
//
//ct155:( !(( sum ( store in locations, distri in 236..251, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (236..251) ) Y[i] ) >= 1 ) ; 
//
//ct156:( !(( sum ( store in locations, distri in 252..262, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (252..262) ) Y[i] ) >= 1 ) ; 
//
//ct157:( !(( sum ( store in locations, distri in 263..271, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (263..271) ) Y[i] ) >= 1 ) ; 
//
//ct158:( !(( sum ( store in locations, distri in 272..279, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (272..279) ) Y[i] ) >= 1 ) ; 
//
//ct159:( !(( sum ( store in locations, distri in 280..283, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (280..283) ) Y[i] ) >= 1 ) ; 
//
//ct160:( !(( sum ( store in locations, distri in 284..290, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (284..290) ) Y[i] ) >= 1 ) ; 
//
//ct162:( !(( sum ( store in locations, distri in 291..317, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (291..317) ) Y[i] ) >= 1 ) ; 
//
//ct163:( !(( sum ( store in locations, distri in 318..336, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (318..336) ) Y[i] ) >= 1 ) ;  
//
//ct164:( !(( sum ( store in locations, distri in 337..358, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (337..358) ) Y[i] ) >= 1 ) ; 
//
//ct165:( !(( sum ( store in locations, distri in 359..388, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (359..388) ) Y[i] ) >= 1 ) ; 
//
//ct167:( !(( sum ( store in locations, distri in 389..406, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (389..406) ) Y[i] ) >= 1 ) ;   
//
//ct168:( !(( sum ( store in locations, distri in 407..456, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (407..456) ) Y[i] ) >= 1 ) ;  
//
//ct169:( !(( sum ( store in locations, distri in 457..481, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (457..481) ) Y[i] ) >= 1 ) ;  
//
//ct170:( !(( sum ( store in locations, distri in 482..483, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (482..483) ) Y[i] ) >= 1 ) ;  
//
//ct171:( !(( sum ( store in locations, distri in 484..484, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (484..484) ) Y[i] ) >= 1 ) ;  
//
//ct172:( !(( sum ( store in locations, distri in 485..518, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (485..518) ) Y[i] ) >= 1 ) ;  
//
//ct173:( !(( sum ( store in locations, distri in 519..541, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (519..541) ) Y[i] ) >= 1 ) ;  
//	
//ct174:( !(( sum ( store in locations, distri in 542..570, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (542..570) ) Y[i] ) >= 1 ) ;  
//
//ct175:( !(( sum ( store in locations, distri in 571..572, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (571..572) ) Y[i] ) >= 1 ) ;  
//
//ct176:( !(( sum ( store in locations, distri in 573..573, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (573..573) ) Y[i] ) >= 1 ) ;  
//
//ct177:( !(( sum ( store in locations, distri in 574..587, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (574..587) ) Y[i] ) >= 1 ) ;  
//	
//ct178:( !(( sum ( store in locations, distri in 588..618, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (588..618) ) Y[i] ) >= 1 ) ;  
//
//ct1780:( !(( sum ( store in locations, distri in 619..622, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (619..622) ) Y[i] ) >= 1 ) ;  
//
//ct1781:( !(( sum ( store in locations, distri in 623..625, j in crops ) Q[store][distri][j] ) == 0 ) ) => ( ( sum ( i in (623..625) ) Y[i] ) >= 1 ) ; 

//Constraint 7&8
// Flow Capacity constraint for storage centres
 
 forall ( store1 in locations )  
 {
  ct108: ( sum ( proc in locations, j in crops) T[proc][store1][j] ) <= Y[store1] * flow_cap ; 
 }	
 
 
 forall (store2 in locations ) 
 {
  ct109: ( sum ( store1 in locations, j in crops) Tp[store1][store2][j] ) <= Yp[store2] * flow_cap ; 
 
 }
 
//Constraints 9 & 10
//Dummy variable to take max (y[i],yp[i])
 forall ( i in locations )
   {
    ct15: z[i] >= Y[i];
 
 	ct16: z[i] >= Yp[i] ;  
   }


//Constraint 12
forall ( distri in locations, j in crops) { 
	ct218: PDS_consmp[distri][j] <= ( sum (store in locations) S[store][distri][j] ) ; 
}


// Constraint 13
//Incorporating leakage in the PDS Distribution. This constraint is written for each state.

forall ( j in crops ) {
ct143: (sum ( distri in (1..14) ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in (1..14) ) S[store][distri][j] ) * (1 - leakage["Jammu & Kashmir"][j] ) ; 

ct144: (sum ( distri in 15..26 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 15..26 ) S[store][distri][j] )* (1 - leakage["Himachal Pradesh"][j] ); 

ct145: (sum ( distri in 27..46 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 27..46 ) S[store][distri][j] ) * (1 - leakage["Punjab"][j] );   
//
//ct111: (sum ( distri in 47..47 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 47..47 ) S[store][distri][j] ) * ( 1- leakage ["Chandigarh"][j] ) ; 
//
//ct112: (sum ( distri in 48..62 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 48..62 ) S[store][distri][j] ) * (1- leakage ["Uttaranchal"][j] ) ; 
//
//ct113: (sum ( distri in 63..82 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 63..82 ) S[store][distri][j] ) * (1- leakage ["Hariyana"][j] ) ; 
//
//ct114: (sum ( distri in 83..90 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 83..90 ) S[store][distri][j] ) * (1- leakage ["Delhi"][j]) ; 
//
//ct115: (sum ( distri in 91..122 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 91..122 ) S[store][distri][j] ) * (1- leakage ["Rajasthan"][j] ) ; 
//
//ct116: (sum ( distri in 123..193 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 123..193 ) S[store][distri][j] ) * (1 - leakage ["Uttar Pradesh"][j] ) ; 
//
//ct117: (sum ( distri in 194..231 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 194..231 ) S[store][distri][j] ) * (1 - leakage ["Bihar"][j] ) ; 
//
//ct118: (sum ( distri in 232..235 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 232..235 ) S[store][distri][j] ) * (1 - leakage ["Sikkim"][j] ) ; 

//ct119: (sum ( distri in 236..251 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 236..251 ) S[store][distri][j] ) * (1- leakage ["Arunachal Pradesh"][j] ); 

//ct120: (sum ( distri in 252..262 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 252..262  ) S[store][distri][j] ) * (1 - leakage ["Nagaland"][j] ) ; 
//
//ct121: (sum (distri in 263..271 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 263..271 ) S[store][distri][j] ) * (1 - leakage ["Maniupur"][j] ) ; 
//
//ct122: (sum ( distri in 272..279 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 272..279 ) S[store][distri][j] ) * (1 - leakage ["Mizoram"][j] ) ; 
//
//ct123: (sum ( distri in 280..283 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 280..283 ) S[store][distri][j] ) * (1 - leakage ["Tripura"][j] ); 
//
//ct124: (sum ( distri in 284..290 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 284..290 ) S[store][distri][j] ) * (1 - leakage ["Meghalaya"][j] ); 
//
//ct125: (sum ( distri in 291..317 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 291..317 ) S[store][distri][j] ) * ( 1 - leakage ["Assam"][j]) ;  
//
//ct126: (sum ( distri in 318..336 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 318..336 ) S[store][distri][j] ) * ( 1- leakage ["West Bengal"][j] ); 
//
//ct127: (sum ( distri in 337..358 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 337..358 ) S[store][distri][j] ) * ( 1 - leakage ["Jharkhand"][j] ) ;
//
//ct128: (sum ( distri in 359..388 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 359..388 ) S[store][distri][j] ) * ( 1- leakage ["Orissa"][j] ) ; 
//
//ct129: (sum ( distri in 389..406 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 389..406 ) S[store][distri][j] ) * ( 1 - leakage ["Chattisgarh"][j] ) ; 
//
//ct130: (sum ( distri in 407..456 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 407..456 ) S[store][distri][j] ) *  ( 1 - leakage ["Madhya Pradesh"][j] ) ;  
//
//ct131: (sum ( distri in 457..481 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 457..481 ) S[store][distri][j] ) * ( 1- leakage ["Gujarat"][j] ) ; 
//
//ct132: (sum ( distri in 482..483 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 482..483 ) S[store][distri][j] ) * ( 1 - leakage ["Daman & Diu"][j] );
//
//ct133: (sum ( distri in 484..484 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 484..484 ) S[store][distri][j] ) * ( 1- leakage ["D & N Haveli"][j]) ;  
//
//ct134: (sum ( distri in 485..518 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 485..518 ) S[store][distri][j] ) * ( 1 - leakage ["Maharashtra"][j] ) ; 
//
//ct135: (sum ( distri in 519..541 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 519..541 ) S[store][distri][j] ) *  ( 1 - leakage ["Andhra Pradesh"][j] ) ;  
//
//ct136: (sum ( distri in 542..570 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 542..570 ) S[store][distri][j] ) *  ( 1 - leakage ["Karnataka"][j] ) ;
//
//ct137: (sum ( distri in 571..572 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 571..572 ) S[store][distri][j] ) * ( 1- leakage ["Goa"][j] ) ;  
//	
//ct139: (sum ( distri in 573..573 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 573..573 ) S[store][distri][j] ) * ( 1-  leakage ["Lakshadeep"][j] ) ; 
//
//ct140: (sum ( distri in 574..587 ) PDS_consmp[distri][j] )  <= (sum ( store in locations, distri in 574..587 ) S[store][distri][j] ) * ( 1 - leakage ["Kerala"][j] ) ; 
//
//ct141: (sum ( distri in 588..618 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 588..618 ) S[store][distri][j] ) * (1 - leakage ["Tamil Nadu"][j] ) ; 
//	
//ct142: (sum ( distri in 619..622 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 619..622 ) S[store][distri][j] ) * (1 - leakage ["Puducherry"][j] ) ;

//ct1420:(sum ( distri in 623..625 ) PDS_consmp[distri][j] ) <= (sum ( store in locations, distri in 623..625 ) S[store][distri][j] ) * (1 - leakage ["A & N Island"][j] ) ; 

}


// Interstate constraints - 18, 19

ct1001: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 1 && store <= 14) && (distri >= 15)) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1002: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 15 && store <= 26) && ((distri <= 14) || (distri >= 27))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1003: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 27 && store <= 46) && ((distri <= 26) || (distri >= 47))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1004: forall (store in locations, distri in locations, j in crops) {
		    if ((store == 47) && ((distri <= 46) || (distri >= 48))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1005: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 48 && store <= 62) && ((distri <= 47) || (distri >= 63))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1006: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 63 && store <= 82) && ((distri <= 62) || (distri >= 83))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

CT1007: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 83 && store <= 90) && ((distri <= 82) || (distri >= 91))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1008: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 91 && store <= 122) && ((distri <= 90) || (distri >= 123))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1009: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 123 && store <= 193) && ((distri <= 122) || (distri >= 194))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1010: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 194 && store <= 231) && ((distri <= 193) || (distri >= 232))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1011: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 232 && store <= 235) && ((distri <= 231) || (distri >= 236))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1012: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 236 && store <= 251) && ((distri <= 235) || (distri >= 252))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1013: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 252 && store <= 262) && ((distri <= 251) || (distri >= 263))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1014: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 263 && store <= 271) && ((distri <= 262) || (distri >= 272))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1015: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 272 && store <= 279) && ((distri <= 271) || (distri >= 280))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1016: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 280 && store <= 283) && ((distri <= 279) || (distri >= 284))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1017: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 284 && store <= 290) && ((distri <= 283) || (distri >= 291))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1018: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 291 && store <= 317) && ((distri <= 290) || (distri >= 318))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1019: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 318 && store <= 336) && ((distri <= 317) || (distri >= 337))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1020: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 337 && store <= 358) && ((distri <= 336) || (distri >= 359))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1021: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 359 && store <= 388) && ((distri <= 358) || (distri >= 389))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1022: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 389 && store <= 406) && ((distri <= 388) || (distri >= 407))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1023: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 407 && store <= 456) && ((distri <= 406) || (distri >= 457))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1024: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 457 && store <= 481) && ((distri <= 456) || (distri >= 482))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1025: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 482 && store <= 483) && ((distri <= 481) || (distri >= 484))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1026: forall (store in locations, distri in locations, j in crops) {
		    if ((store == 484) && ((distri <= 483) || (distri >= 485))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1027: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 485 && store <= 518) && ((distri <= 484) || (distri >= 519))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1028: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 519 && store <= 541) && ((distri <= 518) || (distri >= 542))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1029: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 542 && store <= 570) && ((distri <= 541) || (distri >= 571))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1030: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 571 && store <= 572) && ((distri <= 570) || (distri >= 573))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1031: forall (store in locations, distri in locations, j in crops) {
		    if ((store == 573) && ((distri <= 572) || (distri >= 574))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1032: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 574 && store <= 587) && ((distri <= 573) || (distri >= 588))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1033: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 588 && store <= 618) && ((distri <= 587) || (distri >= 619))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1034: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 619 && store <= 622) && ((distri <= 618) || (distri >= 623))) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

ct1035: forall (store in locations, distri in locations, j in crops) {
		    if ((store >= 623) && (distri <= 622)) {
		        Q[store][distri][j] == 0;
		        T[store][distri][j] == 0;
		        Tp[store][distri][j] == 0;
		        S[store][distri][j] == 0;
		    }
		}

}
//END OF CONSTRAINTS


//SAVE RESULTS

string output_path = "../../postprocess/data/";

execute {
	// Write final costs
	var ofile = new IloOplOutputFile(output_path + "Optimal Cost_Interstate.txt");
	
	ofile.writeln("Optimal objective value="+cplex.getObjValue());
	ofile.writeln("Optimal_proc_cost = " + proc_cost.solutionValue );
	ofile.writeln("Optimal_storage_cost1 = " + storage_cost1.solutionValue );
	ofile.writeln("Optimal_storage_cost2 = " + storage_cost2.solutionValue );
	ofile.writeln("Optimal_transportation_cost_farmer = " + transportation_cost_farmer.solutionValue );
	ofile.writeln("Optimal_transportation_cost_stage1 = " + transportation_cost_stage1.solutionValue );
	ofile.writeln("Optimal_transportation_cost_stage2 = " + transportation_cost_stage2.solutionValue );
	ofile.writeln("Optimal_transportation_cost_outbound = " + transportation_cost_outbound.solutionValue );
	ofile.writeln("Optimal_MSP_cost = " + MSP.solutionValue );
	ofile.close();
 
	//WRITING values of decision variable Q
	var Q_csv = new IloOplOutputFile(output_path + "Q_Interstate.csv");  
	for(var i in locations)
	    for(var j in locations)
	        for(var k in crops) {
	            Q_csv.writeln(i+","+j+","+k+","+Q[i][j][k].solutionValue);
	        }
	Q_csv.close(); 
	
	//WRITING values of total number of storage centers in a district 
	var Z_csv = new IloOplOutputFile(output_path +"Z_Interstate.csv");  
	for(i in locations) {
	    Z_csv.writeln(i+","+z[i].solutionValue);
	} 	 
	Z_csv.close(); 
	
	//WRITING values of decision variable T
	var T_csv = new IloOplOutputFile(output_path + "T_Interstate.csv");  
	for(i in locations)
	    for(j in locations)
	        for(k in crops) {
	            T_csv.writeln(i+","+j+","+k+","+T[i][j][k].solutionValue);
	        }	
	T_csv.close();  
	
	//WRITING values of decision variable Tp
	var Tp_csv = new IloOplOutputFile(output_path + "Tp_Interstate.csv");  
	for(i in locations)
	    for(j in locations)
	        for(k in crops) {
	            Tp_csv.writeln(i+","+j+","+k+","+Tp[i][j][k].solutionValue);
	        }
	Tp_csv.close(); 
	
	//WRITING values of decision variable S
	var S_csv = new IloOplOutputFile(output_path + "S_Interstate.csv");    
	for(i in locations)
	    for(j in locations)
	        for(k in crops) {
	            S_csv.writeln(i+","+j+","+k+","+S[i][j][k].solutionValue);
	        }
	S_csv.close(); 
	
	//WRITING crop availability read from sold_to_gov't
	var PC_csv = new IloOplOutputFile(output_path + "crop_availability.csv");    
	for(i in locations)
	    for(j in crops) {
	        PC_csv.writeln(i+","+j+","+available[i][j].solutionValue);
	    }
	PC_csv.close();
	
}