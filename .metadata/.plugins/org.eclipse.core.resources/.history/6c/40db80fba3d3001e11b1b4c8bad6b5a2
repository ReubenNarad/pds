/*********************************************
 * OPL 22.1.1.0 Model
 * Author: reube
 * Creation Date: Jan 30, 2024 at 11:14:53 AM
 *********************************************/

//{string} districts = { "washington", "oregon" } ;
//{string} grains = ...;
////{string} pulses = { "peas", "dal" } ;
//{string} crops = grains;// union pulses;

range Clusters = 0..5;
range Crops = 1..18;
range Grains = 1..6;
range Pulses = 7..18;

string crops[Crops] = ... ;

float preferences[Crops][Clusters] = ... ;

int households[Clusters] = ... ;

execute {
  writeln(preferences);
  writeln(households);
};

float available[Crops] = [1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000];

float min_grain = .01 ;
float min_pulse = .01 ;

dvar float+ basket[Crops][Clusters];

dexpr float utility = ( sum (crop in Crops, cluster in Clusters) (preferences[crop][cluster] * basket[crop][cluster]));

maximize utility ;

subject to {
  
  // Minimum basket content constraints
  forall ( cluster in Clusters ) {
    ct1: ( sum ( grain in Grains ) basket[grain][cluster] ) == min_grain * households[cluster];
    ct2: ( sum ( puls in Pulses) basket[puls][cluster] ) == min_pulse * households[cluster];
  }
  
  // Baskets do not exceed available
  forall ( crop in Crops ) {
    ct3: ( sum (cluster in Clusters) basket[cluster][crop] ) <= available[crop] ;
  }
  
}

// After solving the model, write the results to a csv file
//execute {
//  var f = new IloOplOutputFile("output.csv");
//  for(var c in crops) {
//    f.write(c+",");
//  }
//  f.writeln("District");
//  for(var d in districts) {
//    for(var c in crops) {
//      f.write(basket[d][c].solutionValue+",");
//    }
//    
//    // Write district name in last column with no comma
//    f.writeln(d);
//  }
//  f.close();
//}
