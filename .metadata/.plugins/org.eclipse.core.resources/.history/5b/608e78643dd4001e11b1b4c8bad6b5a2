/*********************************************
 * OPL 22.1.1.0 Model
 * Author: reube
 * Creation Date: Jan 30, 2024 at 11:14:53 AM
 *********************************************/
range Clusters = 0..5;
range Crops = 1..18;
range Grains = 1..6;
range Pulses = 7..18;
range Districts = 1..625;

string crops[Crops] = ... ;

float preferences[Crops][Clusters] = ... ;

int households[Clusters] = ... ;

string districts[Districts] = ... ;

int households_district[Districts] = ... ;

int clusters_district[Districts] = ... ;


execute {
  writeln(preferences);
  writeln(households);
};

float available[Crops] = [3000,3000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000];

float min_grain = .00005 ; // Per household
float min_pulse = .00003 ; // Per household

dvar float+ basket[Crops][Clusters];

dexpr float utility = ( sum (crop in Crops, cluster in Clusters) (preferences[crop][cluster] * basket[crop][cluster]));

maximize utility ;

subject to {
  
  // Minimum basket content constraints
  forall ( cluster in Clusters ) {
    ct1: ( sum ( grain in Grains ) basket[grain][cluster] ) == min_grain * households[cluster];
    ct2: ( sum ( puls in Pulses) basket[puls][cluster] ) == min_pulse * households[cluster];
  }
  
  // Baskets do not exceed available
  forall ( crop in Crops ) {
    ct3: ( sum (cluster in Clusters) basket[crop][cluster] ) <= available[crop] ;
  }
  
}

// After solving the model, write demand by district to a csv file:

// We know the total population of a cluster, (households)
// and the assignment of crops to each cluster, (basket)
// and the population + cluster assignment of each district, (districts, households_district, clusters_district)
// I want to write it to a csv file with the first column 'district', and the other columns the strings in crops
// The values for each district should be the demand assigned to that district,
// cluster_total_demand * district_population / cluster_population
// for each crop


// Assuming the model has been solved and the 'basket' variable contains the solution

// Step  1: Calculate the demand for each crop in each district
float demand[Districts][Crops];

execute {
  for (var district =   1; district <= Districts; district++) {
    for (var crop =   1; crop <= Crops; crop++) {
      // Calculate the demand for the crop in the district
      // demand = cluster_total_demand * district_population / cluster_population
      var totalDemand =   0.0;
      for (var cluster =   0; cluster <= Clusters; cluster++) {
        totalDemand += basket[crop][cluster] * households[cluster];
      }
      // Corrected syntax for the division operation
      demand[district][crop] = totalDemand * households_district[district] / ( sum(cluster in Clusters) (households[cluster]));
    }
  }
}

// Step  2: Write the demand information to a CSV file
execute {
  var f = new IloOplOutputFile("demand.csv");
   
  // Write the header
  f.writeln("district," + join(crops, ","));
   
  // Write the demand for each district
  for (var district =  1; district <= Districts; district++) {
    var line = districts[district] + ",";
    for (var crop =  1; crop <= Crops; crop++) {
      line += demand[district][crop] + ",";
    }
    // Remove the last comma and add a newline
    line = line.substring(0, line.length -  1);
    f.writeln(line);
  }
   
  f.close();
}
